/*!
 * Tokenize2 v1.3.3 (https://github.com/dragonofmercy/Tokenize2)
 * Copyright 2016-2017 DragonOfMercy.
 * Licensed under the new BSD license
 */
(function (a) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], a);
  } else {
    if (typeof module === 'object' && module.exports) {
      module.exports = function (b, c) {
        if (c === undefined) {
          if (typeof window !== 'undefined') {
            c = require('jquery');
          } else {
            c = require('jquery')(b);
          }
        }
        a(c);
        return c;
      };
    } else {
      a(jQuery);
    }
  }
})(function (e) {
  var c = function (g, f) {
    this.control = false;
    this.element = e(g);
    this.options = e.extend({}, c.DEFAULTS, f);
    this.options.tabIndex = this.options.tabIndex === -1 ? 0 : this.options.tabIndex;
    this.options.sortable = this.options.tokensMaxItems === 1 ? false : this.options.sortable;
    this.bind();
    this.trigger('tokenize:load');
  };
  var a = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    ESCAPE: 27,
    ARROW_UP: 38,
    ARROW_DOWN: 40,
    CTRL: 17,
    MAJ: 16,
  };
  c.VERSION = '1.3.3';
  c.DEBOUNCE = null;
  c.DEFAULTS = {
    tokensMaxItems: 0,
    tokensAllowCustom: false,
    dropdownMaxItems: 10,
    dropdownSelectFirstItem: true,
    searchMinLength: 0,
    searchMaxLength: 0,
    searchFromStart: true,
    searchHighlight: true,
    displayNoResultsMessage: false,
    noResultsMessageText: 'No results mached "%s"',
    delimiter: ',',
    dataSource: 'select',
    debounce: 0,
    placeholder: false,
    sortable: false,
    allowEmptyValues: false,
    zIndexMargin: 500,
    tabIndex: 0,
  };
  c.prototype.trigger = function (h, i, g, f) {
    this.element.trigger(h, i, g, f);
  };
  c.prototype.bind = function () {
    this.element
      .on(
        'tokenize:load',
        {},
        e.proxy(function () {
          this.init();
        }, this)
      )
      .on(
        'tokenize:clear',
        {},
        e.proxy(function () {
          this.clear();
        }, this)
      )
      .on(
        'tokenize:remap',
        {},
        e.proxy(function () {
          this.remap();
        }, this)
      )
      .on(
        'tokenize:select',
        {},
        e.proxy(function (f, g) {
          this.focus(g);
        }, this)
      )
      .on(
        'tokenize:deselect',
        {},
        e.proxy(function () {
          this.blur();
        }, this)
      )
      .on(
        'tokenize:search',
        {},
        e.proxy(function (g, f) {
          this.find(f);
        }, this)
      )
      .on(
        'tokenize:paste',
        {},
        e.proxy(function () {
          this.paste();
        }, this)
      )
      .on(
        'tokenize:dropdown:up',
        {},
        e.proxy(function () {
          this.dropdownSelectionMove(-1);
        }, this)
      )
      .on(
        'tokenize:dropdown:down',
        {},
        e.proxy(function () {
          this.dropdownSelectionMove(1);
        }, this)
      )
      .on(
        'tokenize:dropdown:clear',
        {},
        e.proxy(function () {
          this.dropdownClear();
        }, this)
      )
      .on(
        'tokenize:dropdown:show',
        {},
        e.proxy(function () {
          this.dropdownShow();
        }, this)
      )
      .on(
        'tokenize:dropdown:hide',
        {},
        e.proxy(function () {
          this.dropdownHide();
        }, this)
      )
      .on(
        'tokenize:dropdown:fill',
        {},
        e.proxy(function (g, f) {
          this.dropdownFill(f);
        }, this)
      )
      .on(
        'tokenize:dropdown:itemAdd',
        {},
        e.proxy(function (g, f) {
          this.dropdownAddItem(f);
        }, this)
      )
      .on(
        'tokenize:keypress',
        {},
        e.proxy(function (g, f) {
          this.keypress(f);
        }, this)
      )
      .on(
        'tokenize:keydown',
        {},
        e.proxy(function (g, f) {
          this.keydown(f);
        }, this)
      )
      .on(
        'tokenize:keyup',
        {},
        e.proxy(function (g, f) {
          this.keyup(f);
        }, this)
      )
      .on(
        'tokenize:tokens:reorder',
        {},
        e.proxy(function () {
          this.reorder();
        }, this)
      )
      .on(
        'tokenize:tokens:add',
        {},
        e.proxy(function (h, f, g, i) {
          this.tokenAdd(f, g, i);
        }, this)
      )
      .on(
        'tokenize:tokens:remove',
        {},
        e.proxy(function (g, f) {
          this.tokenRemove(f);
        }, this)
      );
  };
  c.prototype.init = function () {
    this.id = this.guid();
    this.element.hide();
    if (!this.element.attr('multiple')) {
      console.error('Attribute multiple is missing, tokenize2 can be buggy !');
    }
    this.dropdown = undefined;
    this.searchContainer = e('<li class="token-search" />');
    this.input = e('<input autocomplete="off" />')
      .on(
        'keydown',
        {},
        e.proxy(function (f) {
          this.trigger('tokenize:keydown', [f]);
        }, this)
      )
      .on(
        'keypress',
        {},
        e.proxy(function (f) {
          this.trigger('tokenize:keypress', [f]);
        }, this)
      )
      .on(
        'keyup',
        {},
        e.proxy(function (f) {
          this.trigger('tokenize:keyup', [f]);
        }, this)
      )
      .on(
        'focus',
        {},
        e.proxy(function () {
          if (
            this.input.val().length >= this.options.searchMinLength &&
            this.input.val().length > 0
          ) {
            this.trigger('tokenize:search', [this.input.val()]);
          }
        }, this)
      )
      .on(
        'paste',
        {},
        e.proxy(function () {
          if (this.options.tokensAllowCustom) {
            setTimeout(
              e.proxy(function () {
                this.trigger('tokenize:paste');
              }, this),
              10
            );
          }
        }, this)
      );
    if (this.options.searchMaxLength > 0) {
      this.input.attr('maxlength', this.options.searchMaxLength);
    }
    this.tokensContainer = e('<ul class="tokens-container form-control" />')
      .addClass(this.element.attr('data-class'))
      .attr('tabindex', this.options.tabIndex)
      .append(this.searchContainer.append(this.input));
    if (this.options.placeholder !== false) {
      this.placeholder = e('<li class="placeholder" />').html(this.options.placeholder);
      this.tokensContainer.prepend(this.placeholder);
      this.element.on(
        'tokenize:tokens:add tokenize:remap tokenize:select tokenize:deselect tokenize:tokens:remove',
        e.proxy(function () {
          if (
            this.container.hasClass('focus') ||
            e('li.token', this.tokensContainer).length > 0 ||
            this.input.val().length > 0
          ) {
            this.placeholder.hide();
          } else {
            this.placeholder.show();
          }
        }, this)
      );
    }
    this.container = e('<div class="tokenize" />').attr('id', this.id);
    this.container.append(this.tokensContainer).insertAfter(this.element);
    this.container
      .focusin(
        e.proxy(function (f) {
          this.trigger('tokenize:select', [e(f.target)[0] === this.tokensContainer[0]]);
        }, this)
      )
      .focusout(
        e.proxy(function () {
          if (this.container.hasClass('focus')) {
            this.trigger('tokenize:deselect');
          }
        }, this)
      );
    if (this.options.tokensMaxItems === 1) {
      this.container.addClass('single');
    }
    if (this.options.sortable) {
      this.container.addClass('sortable');
      this.tokensContainer.tokenize2sortable({
        itemSelector: 'li.token',
        cursor: 'move',
        placeholder: '<li class="token shadow"><br /></li>',
        placeholderClass: 'token shadow',
        onDragStart: e.proxy(function (g, f, h) {
          this.searchContainer.hide();
          h(g, f);
        }, this),
        onDrop: e.proxy(function (g, f, h) {
          this.searchContainer.show();
          this.trigger('tokenize:tokens:reorder');
          h(g, f);
        }, this),
      });
    }
    this.element
      .on(
        'tokenize:tokens:add tokenize:tokens:remove',
        e.proxy(function () {
          if (
            this.options.tokensMaxItems > 0 &&
            e('li.token', this.tokensContainer).length >= this.options.tokensMaxItems
          ) {
            this.searchContainer.hide();
          } else {
            this.searchContainer.show();
          }
        }, this)
      )
      .on(
        'tokenize:keydown tokenize:keyup tokenize:loaded',
        e.proxy(function () {
          this.scaleInput();
        }, this)
      );
    this.trigger('tokenize:remap');
    this.trigger('tokenize:tokens:reorder');
    this.trigger('tokenize:loaded');
    if (this.element.is(':disabled')) {
      this.disable();
    }
  };
  c.prototype.reorder = function () {
    if (this.options.sortable) {
      var f,
        h,
        g = this.tokensContainer.tokenize2sortable('serialize').get(0);
      e.each(
        g,
        e.proxy(function (j, i) {
          h = e('option[value="' + i.value + '"]', this.element);
          if (f === undefined) {
            h.prependTo(this.element);
          } else {
            f.after(h);
          }
          f = h;
        }, this)
      );
    }
  };
  c.prototype.paste = function () {
    var f = new RegExp(
      this.escapeRegex(
        Array.isArray(this.options.delimiter)
          ? this.options.delimiter.join('|')
          : this.options.delimiter
      ),
      'ig'
    );
    if (f.test(this.input.val())) {
      e.each(
        this.input.val().split(f),
        e.proxy(function (g, h) {
          this.trigger('tokenize:tokens:add', [h, null, true]);
        }, this)
      );
    }
  };
  c.prototype.tokenAdd = function (g, h, f) {
    g = this.escape(g);
    h = this.escape(h) || g;
    f = f || false;
    this.resetInput();
    if (g === undefined || (!this.options.allowEmptyValues && g === '')) {
      this.trigger('tokenize:tokens:error:empty');
      return this;
    }
    if (
      this.options.tokensMaxItems > 0 &&
      e('li.token', this.tokensContainer).length >= this.options.tokensMaxItems
    ) {
      this.trigger('tokenize:tokens:error:max');
      return this;
    }
    if (e('li.token[data-value="' + g + '"]', this.tokensContainer).length > 0) {
      this.trigger('tokenize:tokens:error:duplicate', [g, h]);
      return this;
    }
    if (e('option[value="' + g + '"]', this.element).length) {
      e('option[value="' + g + '"]', this.element)
        .attr('selected', 'selected')
        .prop('selected', true);
    } else {
      if (f) {
        this.element.append(e('<option selected />').val(g).html(h));
      } else {
        if (this.options.tokensAllowCustom) {
          this.element.append(e('<option selected data-type="custom" />').val(g).html(h));
        } else {
          this.trigger('tokenize:tokens:error:notokensAllowCustom');
          return this;
        }
      }
    }
    e('<li class="token" />')
      .attr('data-value', g)
      .append('<span>' + h + '</span>')
      .prepend(
        e('<a class="dismiss" />').on(
          'mousedown touchstart',
          {},
          e.proxy(function (i) {
            i.preventDefault();
            if (i.which == 1) {
              this.trigger('tokenize:tokens:remove', [g]);
            }
          }, this)
        )
      )
      .insertBefore(this.searchContainer);
    this.trigger('tokenize:dropdown:hide');
    this.trigger('tokenize:tokens:added', [g, h]);
    return this;
  };
  c.prototype.tokenRemove = function (g) {
    var f = e('option[value="' + g + '"]', this.element);
    if (f.attr('data-type') === 'custom') {
      f.remove();
    } else {
      f.removeAttr('selected').prop('selected', false);
    }
    e('li.token[data-value="' + g + '"]', this.tokensContainer).remove();
    this.trigger('tokenize:tokens:reorder');
    return this;
  };
  c.prototype.remap = function () {
    var f = e('option:selected', this.element);
    f.each(
      e.proxy(function (g, h) {
        this.trigger('tokenize:tokens:add', [e(h).val(), e(h).html(), false]);
      }, this)
    );
    return this;
  };
  c.prototype.disable = function () {
    this.tokensContainer.addClass('disabled');
    this.searchContainer.hide();
    return this;
  };
  c.prototype.enable = function () {
    this.tokensContainer.removeClass('disabled');
    this.searchContainer.show();
    return this;
  };
  c.prototype.focus = function (f) {
    if (this.element.is(':disabled')) {
      this.tokensContainer.blur();
      return;
    }
    if (f) {
      this.input.focus();
    }
    if (!this.container.hasClass('focus')) {
      this.container.addClass('focus');
      this.trigger('tokenize:focus');
    }
  };
  c.prototype.blur = function () {
    if (this.isDropdownOpen()) {
      this.trigger('tokenize:dropdown:hide');
    }
    this.container.removeClass('focus');
    this.resetPending();
    if (!this.tokensContainer.attr('tabindex')) {
      this.tokensContainer.attr('tabindex', this.options.tabIndex);
    }
  };
  c.prototype.keydown = function (g) {
    if (g.type === 'keydown') {
      switch (g.keyCode) {
        case a.BACKSPACE:
          if (this.input.val().length < 1) {
            g.preventDefault();
            if (e('li.token.pending-delete', this.tokensContainer).length > 0) {
              this.trigger('tokenize:tokens:remove', [
                e('li.token.pending-delete', this.tokensContainer).first().attr('data-value'),
              ]);
            } else {
              var f = e('li.token:last', this.tokensContainer);
              if (f.length > 0) {
                this.trigger('tokenize:tokens:markForDelete', [f.attr('data-value')]);
                f.addClass('pending-delete');
              }
            }
            this.trigger('tokenize:dropdown:hide');
          }
          break;
        case a.TAB:
          if (!g.shiftKey) {
            this.pressedDelimiter(g);
          } else {
            this.tokensContainer.removeAttr('tabindex');
          }
          break;
        case a.ENTER:
          this.pressedDelimiter(g);
          break;
        case a.ESCAPE:
          this.resetPending();
          break;
        case a.ARROW_UP:
          g.preventDefault();
          this.trigger('tokenize:dropdown:up');
          break;
        case a.ARROW_DOWN:
          g.preventDefault();
          this.trigger('tokenize:dropdown:down');
          break;
        case a.CTRL:
          this.control = true;
          break;
        default:
          this.resetPending();
          break;
      }
    } else {
      g.preventDefault();
    }
  };
  c.prototype.keyup = function (f) {
    if (f.type === 'keyup') {
      switch (f.keyCode) {
        case a.TAB:
        case a.ENTER:
        case a.ESCAPE:
        case a.ARROW_UP:
        case a.ARROW_DOWN:
        case a.MAJ:
          break;
        case a.CTRL:
          this.control = false;
          break;
        case a.BACKSPACE:
        default:
          if (
            this.input.val().length >= this.options.searchMinLength &&
            this.input.val().length > 0
          ) {
            this.trigger('tokenize:search', [this.input.val()]);
          } else {
            this.trigger('tokenize:dropdown:hide');
          }
          break;
      }
    } else {
      f.preventDefault();
    }
  };
  c.prototype.keypress = function (f) {
    if (f.type === 'keypress' && !this.element.is(':disabled')) {
      var g = false;
      if (Array.isArray(this.options.delimiter)) {
        if (this.options.delimiter.indexOf(String.fromCharCode(f.which)) >= 0) {
          g = true;
        }
      } else {
        if (String.fromCharCode(f.which) === this.options.delimiter) {
          g = true;
        }
      }
      if (g) {
        this.pressedDelimiter(f);
      }
    } else {
      f.preventDefault();
    }
  };
  c.prototype.pressedDelimiter = function (f) {
    this.resetPending();
    if (
      this.isDropdownOpen() &&
      e('li.active', this.dropdown).length > 0 &&
      this.control === false
    ) {
      f.preventDefault();
      e('li.active a', this.dropdown).trigger('mousedown');
    } else {
      if (this.input.val().length > 0) {
        f.preventDefault();
        this.trigger('tokenize:tokens:add', [this.input.val()]);
      }
    }
  };
  c.prototype.find = function (f) {
    if (f.length < this.options.searchMinLength) {
      this.trigger('tokenize:dropdown:hide');
      return false;
    }
    this.lastSearchTerms = f;
    if (this.options.dataSource === 'select') {
      this.dataSourceLocal(f);
    } else {
      if (typeof this.options.dataSource === 'function') {
        this.options.dataSource(f, this);
      } else {
        this.dataSourceRemote(f);
      }
    }
  };
  c.prototype.dataSourceRemote = function (f) {
    this.debounce(
      e.proxy(function () {
        if (this.xhr !== undefined) {
          this.xhr.abort();
        }
        this.xhr = e.ajax(this.options.dataSource, {
          data: { search: f },
          dataType: 'text',
          success: e.proxy(function (g) {
            var h = [];
            if (g != '') {
              g = JSON.parse(g);
              e.each(g, function (j, i) {
                h.push(i);
              });
            }
            this.trigger('tokenize:dropdown:fill', [h]);
          }, this),
        });
      }, this),
      this.options.debounce
    );
  };
  c.prototype.dataSourceLocal = function (h) {
    var f = this.transliteration(h);
    var k = [];
    var g = (this.options.searchFromStart ? '^' : '') + this.escapeRegex(f);
    var j = new RegExp(g, 'i');
    var i = this;
    e('option', this.element)
      .not(':selected, :disabled')
      .each(function () {
        var m = i.trim(e(this).html());
        var l = i.trim(e(this).attr('value'));
        if (j.test(i.transliteration(m))) {
          k.push({ value: l, text: m });
        }
      });
    this.trigger('tokenize:dropdown:fill', [k]);
  };
  c.prototype.debounce = function (h, g) {
    var i = arguments;
    var f = e.proxy(function () {
      h.apply(this, i);
      this.debounceTimeout = undefined;
    }, this);
    if (this.debounceTimeout !== undefined) {
      clearTimeout(this.debounceTimeout);
    }
    this.debounceTimeout = setTimeout(f, g || 0);
  };
  c.prototype.dropdownShow = function () {
    if (!this.isDropdownOpen()) {
      e('.tokenize-dropdown').remove();
      this.dropdown = e(
        '<div class="tokenize-dropdown dropdown"><ul class="dropdown-menu" /></div>'
      ).attr('data-related', this.id);
      e('body').append(this.dropdown);
      this.dropdown.show();
      this.dropdown.css('z-index', this.calculatezindex() + this.options.zIndexMargin);
      e(window)
        .on(
          'resize scroll',
          {},
          e.proxy(function () {
            this.dropdownMove();
          }, this)
        )
        .trigger('resize');
      this.trigger('tokenize:dropdown:shown');
    }
  };
  c.prototype.calculatezindex = function () {
    var g = this.container;
    var f = 0;
    if (!isNaN(parseInt(g.css('z-index'))) && parseInt(g.css('z-index')) > 0) {
      f = parseInt(g.css('z-index'));
    }
    if (f < 1) {
      while (g.length) {
        g = g.parent();
        if (g.length > 0) {
          if (!isNaN(parseInt(g.css('z-index'))) && parseInt(g.css('z-index')) > 0) {
            return parseInt(g.css('z-index'));
          }
          if (g.is('html')) {
            break;
          }
        }
      }
    }
    return f;
  };
  c.prototype.dropdownHide = function () {
    if (this.isDropdownOpen()) {
      e(window).off('resize scroll');
      this.dropdown.remove();
      this.dropdown = undefined;
      this.trigger('tokenize:dropdown:hidden');
    }
  };
  c.prototype.dropdownClear = function () {
    if (this.dropdown) {
      this.dropdown.find('.dropdown-menu li').remove();
    }
  };
  c.prototype.dropdownFill = function (f) {
    if (f && f.length > 0) {
      this.trigger('tokenize:dropdown:show');
      this.trigger('tokenize:dropdown:clear');
      e.each(
        f,
        e.proxy(function (h, g) {
          if (e('li.dropdown-item', this.dropdown).length <= this.options.dropdownMaxItems) {
            this.trigger('tokenize:dropdown:itemAdd', [g]);
          }
        }, this)
      );
      if (e('li.active', this.dropdown).length < 1 && this.options.dropdownSelectFirstItem) {
        e('li:first', this.dropdown).addClass('active');
      }
      if (e('li.dropdown-item', this.dropdown).length < 1) {
        this.trigger('tokenize:dropdown:hide');
      } else {
        this.trigger('tokenize:dropdown:filled');
      }
    } else {
      if (this.options.displayNoResultsMessage) {
        this.trigger('tokenize:dropdown:show');
        this.trigger('tokenize:dropdown:clear');
        this.dropdown
          .find('.dropdown-menu')
          .append(
            e('<li class="dropdown-item locked" />').html(
              this.options.noResultsMessageText.replace('%s', this.input.val())
            )
          );
      } else {
        this.trigger('tokenize:dropdown:hide');
      }
    }
    e(window).trigger('resize');
  };
  c.prototype.dropdownSelectionMove = function (g) {
    if (e('li.active', this.dropdown).length > 0) {
      if (!e('li.active', this.dropdown).is('li:' + (g > 0 ? 'last-child' : 'first-child'))) {
        var f = e('li.active', this.dropdown);
        f.removeClass('active');
        if (g > 0) {
          f.next().addClass('active');
        } else {
          f.prev().addClass('active');
        }
      } else {
        e('li.active', this.dropdown).removeClass('active');
        if (this.options.dropdownSelectFirstItem) {
          e('li:' + (g > 0 ? 'first-child' : 'last-child'), this.dropdown).addClass('active');
        }
      }
    } else {
      e('li:first', this.dropdown).addClass('active');
    }
  };
  c.prototype.dropdownAddItem = function (f) {
    if (this.isDropdownOpen()) {
      if (f.hasOwnProperty('text')) {
        f.text = this.escape(f.text);
      }
      f.value = this.escape(f.value);
      var g = e('<li class="dropdown-item" />')
        .html(this.dropdownItemFormat(f))
        .on(
          'mouseover',
          e.proxy(function (h) {
            h.preventDefault();
            h.target = this.fixTarget(h.target);
            e('li', this.dropdown).removeClass('active');
            e(h.target).parent().addClass('active');
          }, this)
        )
        .on(
          'mouseout',
          e.proxy(function () {
            e('li', this.dropdown).removeClass('active');
          }, this)
        )
        .on(
          'mousedown touchstart',
          e.proxy(function (h) {
            h.preventDefault();
            h.target = this.fixTarget(h.target);
            this.trigger('tokenize:tokens:add', [
              e(h.target).attr('data-value'),
              e(h.target).attr('data-text'),
              true,
            ]);
          }, this)
        );
      if (
        e('li.token[data-value="' + g.find('a').attr('data-value') + '"]', this.tokensContainer)
          .length < 1
      ) {
        this.dropdown.find('.dropdown-menu').append(g);
        this.trigger('tokenize:dropdown:itemAdded', [f]);
      }
    }
  };
  c.prototype.fixTarget = function (i) {
    var f = e(i);
    if (!f.data('value')) {
      var g = f.find('a');
      if (g.length) {
        return g.get(0);
      }
      var h = f.parents('[data-value]');
      if (h.length) {
        return h.get(0);
      }
    }
    return f.get(0);
  };
  c.prototype.dropdownItemFormat = function (h) {
    if (h.hasOwnProperty('text')) {
      var g = '';
      if (this.options.searchHighlight) {
        var f = new RegExp(
          (this.options.searchFromStart ? '^' : '') +
            '(' +
            this.escapeRegex(this.transliteration(this.lastSearchTerms)) +
            ')',
          'gi'
        );
        g = h.text.replace(f, '<span class="tokenize-highlight">$1</span>');
      } else {
        g = h.text;
      }
      return e('<a />').html(g).attr({ 'data-value': h.value, 'data-text': h.text });
    }
  };
  c.prototype.dropdownMove = function () {
    var h = this.tokensContainer.offset();
    var g = this.tokensContainer.outerHeight();
    var f = this.tokensContainer.outerWidth();
    h.top += g;
    this.dropdown.css({ width: f }).offset(h);
  };
  c.prototype.isDropdownOpen = function () {
    return this.dropdown !== undefined;
  };
  c.prototype.clear = function () {
    e.each(
      e('li.token', this.tokensContainer),
      e.proxy(function (g, f) {
        this.trigger('tokenize:tokens:remove', [e(f).attr('data-value')]);
      }, this)
    );
    this.trigger('tokenize:dropdown:hide');
    return this;
  };
  c.prototype.resetPending = function () {
    var f = e('li.pending-delete:last', this.tokensContainer);
    if (f.length > 0) {
      this.trigger('tokenize:tokens:cancelDelete', [f.attr('data-value')]);
      f.removeClass('pending-delete');
    }
  };
  c.prototype.scaleInput = function () {
    if (!this.ctx) {
      this.ctx = document.createElement('canvas').getContext('2d');
    }
    var f, g;
    this.ctx.font =
      this.input.css('font-style') +
      ' ' +
      this.input.css('font-variant') +
      ' ' +
      this.input.css('font-weight') +
      ' ' +
      Math.ceil(parseFloat(this.input.css('font-size'))) +
      'px ' +
      this.input.css('font-family');
    f =
      Math.round(this.ctx.measureText(this.input.val() + 'M').width) +
      Math.ceil(parseFloat(this.searchContainer.css('margin-left'))) +
      Math.ceil(parseFloat(this.searchContainer.css('margin-right')));
    g =
      this.tokensContainer.width() -
      (Math.ceil(parseFloat(this.tokensContainer.css('border-left-width'))) +
        Math.ceil(
          parseFloat(this.tokensContainer.css('border-right-width')) +
            Math.ceil(parseFloat(this.tokensContainer.css('padding-left'))) +
            Math.ceil(parseFloat(this.tokensContainer.css('padding-right')))
        ));
    if (f >= g) {
      f = g;
    }
    this.searchContainer.width(f);
    this.ctx.restore();
  };
  c.prototype.resetInput = function () {
    this.input.val('');
    this.scaleInput();
  };
  c.prototype.trim = function (f) {
    return f.trim();
  };
  c.prototype.escape = function (f) {
    if (f) {
      f = f.replaceAll(/["]/g, '&quot;');
      f = f.replaceAll(/[<]/g, '&lt;');
      f = f.replaceAll(/[>]/g, '&gt;');
    }
    return f;
  };
  c.prototype.escapeRegex = function (f) {
    return f.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
  };
  c.prototype.guid = function () {
    function f() {
      return Math.floor((1 + Math.random()) * 65536)
        .toString(16)
        .substring(1);
    }
    return f() + f() + '-' + f() + '-' + f() + '-' + f() + '-' + f() + f() + f();
  };
  c.prototype.toArray = function () {
    var f = [];
    e('option:selected', this.element).each(function () {
      f.push(e(this).val());
    });
    return f;
  };
  c.prototype.transliteration = function (h) {
    var g = {
      '\u24B6': 'A',
      Ａ: 'A',
      À: 'A',
      Á: 'A',
      Â: 'A',
      Ầ: 'A',
      Ấ: 'A',
      Ẫ: 'A',
      Ẩ: 'A',
      Ã: 'A',
      Ā: 'A',
      Ă: 'A',
      Ằ: 'A',
      Ắ: 'A',
      Ẵ: 'A',
      Ẳ: 'A',
      Ȧ: 'A',
      Ǡ: 'A',
      Ä: 'A',
      Ǟ: 'A',
      Ả: 'A',
      Å: 'A',
      Ǻ: 'A',
      Ǎ: 'A',
      Ȁ: 'A',
      Ȃ: 'A',
      Ạ: 'A',
      Ậ: 'A',
      Ặ: 'A',
      Ḁ: 'A',
      Ą: 'A',
      Ⱥ: 'A',
      Ɐ: 'A',
      Ꜳ: 'AA',
      Æ: 'AE',
      Ǽ: 'AE',
      Ǣ: 'AE',
      Ꜵ: 'AO',
      Ꜷ: 'AU',
      Ꜹ: 'AV',
      Ꜻ: 'AV',
      Ꜽ: 'AY',
      '\u24B7': 'B',
      Ｂ: 'B',
      Ḃ: 'B',
      Ḅ: 'B',
      Ḇ: 'B',
      Ƀ: 'B',
      Ƃ: 'B',
      Ɓ: 'B',
      '\u24B8': 'C',
      Ｃ: 'C',
      Ć: 'C',
      Ĉ: 'C',
      Ċ: 'C',
      Č: 'C',
      Ç: 'C',
      Ḉ: 'C',
      Ƈ: 'C',
      Ȼ: 'C',
      Ꜿ: 'C',
      '\u24B9': 'D',
      Ｄ: 'D',
      Ḋ: 'D',
      Ď: 'D',
      Ḍ: 'D',
      Ḑ: 'D',
      Ḓ: 'D',
      Ḏ: 'D',
      Đ: 'D',
      Ƌ: 'D',
      Ɗ: 'D',
      Ɖ: 'D',
      Ꝺ: 'D',
      Ǳ: 'DZ',
      Ǆ: 'DZ',
      ǲ: 'Dz',
      ǅ: 'Dz',
      '\u24BA': 'E',
      Ｅ: 'E',
      È: 'E',
      É: 'E',
      Ê: 'E',
      Ề: 'E',
      Ế: 'E',
      Ễ: 'E',
      Ể: 'E',
      Ẽ: 'E',
      Ē: 'E',
      Ḕ: 'E',
      Ḗ: 'E',
      Ĕ: 'E',
      Ė: 'E',
      Ë: 'E',
      Ẻ: 'E',
      Ě: 'E',
      Ȅ: 'E',
      Ȇ: 'E',
      Ẹ: 'E',
      Ệ: 'E',
      Ȩ: 'E',
      Ḝ: 'E',
      Ę: 'E',
      Ḙ: 'E',
      Ḛ: 'E',
      Ɛ: 'E',
      Ǝ: 'E',
      '\u24BB': 'F',
      Ｆ: 'F',
      Ḟ: 'F',
      Ƒ: 'F',
      Ꝼ: 'F',
      '\u24BC': 'G',
      Ｇ: 'G',
      Ǵ: 'G',
      Ĝ: 'G',
      Ḡ: 'G',
      Ğ: 'G',
      Ġ: 'G',
      Ǧ: 'G',
      Ģ: 'G',
      Ǥ: 'G',
      Ɠ: 'G',
      Ꞡ: 'G',
      Ᵹ: 'G',
      Ꝿ: 'G',
      '\u24BD': 'H',
      Ｈ: 'H',
      Ĥ: 'H',
      Ḣ: 'H',
      Ḧ: 'H',
      Ȟ: 'H',
      Ḥ: 'H',
      Ḩ: 'H',
      Ḫ: 'H',
      Ħ: 'H',
      Ⱨ: 'H',
      Ⱶ: 'H',
      Ɥ: 'H',
      '\u24BE': 'I',
      Ｉ: 'I',
      Ì: 'I',
      Í: 'I',
      Î: 'I',
      Ĩ: 'I',
      Ī: 'I',
      Ĭ: 'I',
      İ: 'I',
      Ï: 'I',
      Ḯ: 'I',
      Ỉ: 'I',
      Ǐ: 'I',
      Ȉ: 'I',
      Ȋ: 'I',
      Ị: 'I',
      Į: 'I',
      Ḭ: 'I',
      Ɨ: 'I',
      '\u24BF': 'J',
      Ｊ: 'J',
      Ĵ: 'J',
      Ɉ: 'J',
      '\u24C0': 'K',
      Ｋ: 'K',
      Ḱ: 'K',
      Ǩ: 'K',
      Ḳ: 'K',
      Ķ: 'K',
      Ḵ: 'K',
      Ƙ: 'K',
      Ⱪ: 'K',
      Ꝁ: 'K',
      Ꝃ: 'K',
      Ꝅ: 'K',
      Ꞣ: 'K',
      '\u24C1': 'L',
      Ｌ: 'L',
      Ŀ: 'L',
      Ĺ: 'L',
      Ľ: 'L',
      Ḷ: 'L',
      Ḹ: 'L',
      Ļ: 'L',
      Ḽ: 'L',
      Ḻ: 'L',
      Ł: 'L',
      Ƚ: 'L',
      Ɫ: 'L',
      Ⱡ: 'L',
      Ꝉ: 'L',
      Ꝇ: 'L',
      Ꞁ: 'L',
      Ǉ: 'LJ',
      ǈ: 'Lj',
      '\u24C2': 'M',
      Ｍ: 'M',
      Ḿ: 'M',
      Ṁ: 'M',
      Ṃ: 'M',
      Ɱ: 'M',
      Ɯ: 'M',
      '\u24C3': 'N',
      Ｎ: 'N',
      Ǹ: 'N',
      Ń: 'N',
      Ñ: 'N',
      Ṅ: 'N',
      Ň: 'N',
      Ṇ: 'N',
      Ņ: 'N',
      Ṋ: 'N',
      Ṉ: 'N',
      Ƞ: 'N',
      Ɲ: 'N',
      Ꞑ: 'N',
      Ꞥ: 'N',
      Ǌ: 'NJ',
      ǋ: 'Nj',
      '\u24C4': 'O',
      Ｏ: 'O',
      Ò: 'O',
      Ó: 'O',
      Ô: 'O',
      Ồ: 'O',
      Ố: 'O',
      Ỗ: 'O',
      Ổ: 'O',
      Õ: 'O',
      Ṍ: 'O',
      Ȭ: 'O',
      Ṏ: 'O',
      Ō: 'O',
      Ṑ: 'O',
      Ṓ: 'O',
      Ŏ: 'O',
      Ȯ: 'O',
      Ȱ: 'O',
      Ö: 'O',
      Ȫ: 'O',
      Ỏ: 'O',
      Ő: 'O',
      Ǒ: 'O',
      Ȍ: 'O',
      Ȏ: 'O',
      Ơ: 'O',
      Ờ: 'O',
      Ớ: 'O',
      Ỡ: 'O',
      Ở: 'O',
      Ợ: 'O',
      Ọ: 'O',
      Ộ: 'O',
      Ǫ: 'O',
      Ǭ: 'O',
      Ø: 'O',
      Ǿ: 'O',
      Ɔ: 'O',
      Ɵ: 'O',
      Ꝋ: 'O',
      Ꝍ: 'O',
      Ƣ: 'OI',
      Ꝏ: 'OO',
      Ȣ: 'OU',
      '\u24C5': 'P',
      Ｐ: 'P',
      Ṕ: 'P',
      Ṗ: 'P',
      Ƥ: 'P',
      Ᵽ: 'P',
      Ꝑ: 'P',
      Ꝓ: 'P',
      Ꝕ: 'P',
      '\u24C6': 'Q',
      Ｑ: 'Q',
      Ꝗ: 'Q',
      Ꝙ: 'Q',
      Ɋ: 'Q',
      '\u24C7': 'R',
      Ｒ: 'R',
      Ŕ: 'R',
      Ṙ: 'R',
      Ř: 'R',
      Ȑ: 'R',
      Ȓ: 'R',
      Ṛ: 'R',
      Ṝ: 'R',
      Ŗ: 'R',
      Ṟ: 'R',
      Ɍ: 'R',
      Ɽ: 'R',
      Ꝛ: 'R',
      Ꞧ: 'R',
      Ꞃ: 'R',
      '\u24C8': 'S',
      Ｓ: 'S',
      ẞ: 'S',
      Ś: 'S',
      Ṥ: 'S',
      Ŝ: 'S',
      Ṡ: 'S',
      Š: 'S',
      Ṧ: 'S',
      Ṣ: 'S',
      Ṩ: 'S',
      Ș: 'S',
      Ş: 'S',
      Ȿ: 'S',
      Ꞩ: 'S',
      Ꞅ: 'S',
      '\u24C9': 'T',
      Ｔ: 'T',
      Ṫ: 'T',
      Ť: 'T',
      Ṭ: 'T',
      Ț: 'T',
      Ţ: 'T',
      Ṱ: 'T',
      Ṯ: 'T',
      Ŧ: 'T',
      Ƭ: 'T',
      Ʈ: 'T',
      Ⱦ: 'T',
      Ꞇ: 'T',
      Ꜩ: 'TZ',
      '\u24CA': 'U',
      Ｕ: 'U',
      Ù: 'U',
      Ú: 'U',
      Û: 'U',
      Ũ: 'U',
      Ṹ: 'U',
      Ū: 'U',
      Ṻ: 'U',
      Ŭ: 'U',
      Ü: 'U',
      Ǜ: 'U',
      Ǘ: 'U',
      Ǖ: 'U',
      Ǚ: 'U',
      Ủ: 'U',
      Ů: 'U',
      Ű: 'U',
      Ǔ: 'U',
      Ȕ: 'U',
      Ȗ: 'U',
      Ư: 'U',
      Ừ: 'U',
      Ứ: 'U',
      Ữ: 'U',
      Ử: 'U',
      Ự: 'U',
      Ụ: 'U',
      Ṳ: 'U',
      Ų: 'U',
      Ṷ: 'U',
      Ṵ: 'U',
      Ʉ: 'U',
      '\u24CB': 'V',
      Ｖ: 'V',
      Ṽ: 'V',
      Ṿ: 'V',
      Ʋ: 'V',
      Ꝟ: 'V',
      Ʌ: 'V',
      Ꝡ: 'VY',
      '\u24CC': 'W',
      Ｗ: 'W',
      Ẁ: 'W',
      Ẃ: 'W',
      Ŵ: 'W',
      Ẇ: 'W',
      Ẅ: 'W',
      Ẉ: 'W',
      Ⱳ: 'W',
      '\u24CD': 'X',
      Ｘ: 'X',
      Ẋ: 'X',
      Ẍ: 'X',
      '\u24CE': 'Y',
      Ｙ: 'Y',
      Ỳ: 'Y',
      Ý: 'Y',
      Ŷ: 'Y',
      Ỹ: 'Y',
      Ȳ: 'Y',
      Ẏ: 'Y',
      Ÿ: 'Y',
      Ỷ: 'Y',
      Ỵ: 'Y',
      Ƴ: 'Y',
      Ɏ: 'Y',
      Ỿ: 'Y',
      '\u24CF': 'Z',
      Ｚ: 'Z',
      Ź: 'Z',
      Ẑ: 'Z',
      Ż: 'Z',
      Ž: 'Z',
      Ẓ: 'Z',
      Ẕ: 'Z',
      Ƶ: 'Z',
      Ȥ: 'Z',
      Ɀ: 'Z',
      Ⱬ: 'Z',
      Ꝣ: 'Z',
      '\u24D0': 'a',
      ａ: 'a',
      ẚ: 'a',
      à: 'a',
      á: 'a',
      â: 'a',
      ầ: 'a',
      ấ: 'a',
      ẫ: 'a',
      ẩ: 'a',
      ã: 'a',
      ā: 'a',
      ă: 'a',
      ằ: 'a',
      ắ: 'a',
      ẵ: 'a',
      ẳ: 'a',
      ȧ: 'a',
      ǡ: 'a',
      ä: 'a',
      ǟ: 'a',
      ả: 'a',
      å: 'a',
      ǻ: 'a',
      ǎ: 'a',
      ȁ: 'a',
      ȃ: 'a',
      ạ: 'a',
      ậ: 'a',
      ặ: 'a',
      ḁ: 'a',
      ą: 'a',
      ⱥ: 'a',
      ɐ: 'a',
      ꜳ: 'aa',
      æ: 'ae',
      ǽ: 'ae',
      ǣ: 'ae',
      ꜵ: 'ao',
      ꜷ: 'au',
      ꜹ: 'av',
      ꜻ: 'av',
      ꜽ: 'ay',
      '\u24D1': 'b',
      ｂ: 'b',
      ḃ: 'b',
      ḅ: 'b',
      ḇ: 'b',
      ƀ: 'b',
      ƃ: 'b',
      ɓ: 'b',
      '\u24D2': 'c',
      ｃ: 'c',
      ć: 'c',
      ĉ: 'c',
      ċ: 'c',
      č: 'c',
      ç: 'c',
      ḉ: 'c',
      ƈ: 'c',
      ȼ: 'c',
      ꜿ: 'c',
      ↄ: 'c',
      '\u24D3': 'd',
      ｄ: 'd',
      ḋ: 'd',
      ď: 'd',
      ḍ: 'd',
      ḑ: 'd',
      ḓ: 'd',
      ḏ: 'd',
      đ: 'd',
      ƌ: 'd',
      ɖ: 'd',
      ɗ: 'd',
      ꝺ: 'd',
      ǳ: 'dz',
      ǆ: 'dz',
      '\u24D4': 'e',
      ｅ: 'e',
      è: 'e',
      é: 'e',
      ê: 'e',
      ề: 'e',
      ế: 'e',
      ễ: 'e',
      ể: 'e',
      ẽ: 'e',
      ē: 'e',
      ḕ: 'e',
      ḗ: 'e',
      ĕ: 'e',
      ė: 'e',
      ë: 'e',
      ẻ: 'e',
      ě: 'e',
      ȅ: 'e',
      ȇ: 'e',
      ẹ: 'e',
      ệ: 'e',
      ȩ: 'e',
      ḝ: 'e',
      ę: 'e',
      ḙ: 'e',
      ḛ: 'e',
      ɇ: 'e',
      ɛ: 'e',
      ǝ: 'e',
      '\u24D5': 'f',
      ｆ: 'f',
      ḟ: 'f',
      ƒ: 'f',
      ꝼ: 'f',
      '\u24D6': 'g',
      ｇ: 'g',
      ǵ: 'g',
      ĝ: 'g',
      ḡ: 'g',
      ğ: 'g',
      ġ: 'g',
      ǧ: 'g',
      ģ: 'g',
      ǥ: 'g',
      ɠ: 'g',
      ꞡ: 'g',
      ᵹ: 'g',
      ꝿ: 'g',
      '\u24D7': 'h',
      ｈ: 'h',
      ĥ: 'h',
      ḣ: 'h',
      ḧ: 'h',
      ȟ: 'h',
      ḥ: 'h',
      ḩ: 'h',
      ḫ: 'h',
      ẖ: 'h',
      ħ: 'h',
      ⱨ: 'h',
      ⱶ: 'h',
      ɥ: 'h',
      ƕ: 'hv',
      '\u24D8': 'i',
      ｉ: 'i',
      ì: 'i',
      í: 'i',
      î: 'i',
      ĩ: 'i',
      ī: 'i',
      ĭ: 'i',
      ï: 'i',
      ḯ: 'i',
      ỉ: 'i',
      ǐ: 'i',
      ȉ: 'i',
      ȋ: 'i',
      ị: 'i',
      į: 'i',
      ḭ: 'i',
      ɨ: 'i',
      ı: 'i',
      '\u24D9': 'j',
      ｊ: 'j',
      ĵ: 'j',
      ǰ: 'j',
      ɉ: 'j',
      '\u24DA': 'k',
      ｋ: 'k',
      ḱ: 'k',
      ǩ: 'k',
      ḳ: 'k',
      ķ: 'k',
      ḵ: 'k',
      ƙ: 'k',
      ⱪ: 'k',
      ꝁ: 'k',
      ꝃ: 'k',
      ꝅ: 'k',
      ꞣ: 'k',
      '\u24DB': 'l',
      ｌ: 'l',
      ŀ: 'l',
      ĺ: 'l',
      ľ: 'l',
      ḷ: 'l',
      ḹ: 'l',
      ļ: 'l',
      ḽ: 'l',
      ḻ: 'l',
      ſ: 'l',
      ł: 'l',
      ƚ: 'l',
      ɫ: 'l',
      ⱡ: 'l',
      ꝉ: 'l',
      ꞁ: 'l',
      ꝇ: 'l',
      ǉ: 'lj',
      '\u24DC': 'm',
      ｍ: 'm',
      ḿ: 'm',
      ṁ: 'm',
      ṃ: 'm',
      ɱ: 'm',
      ɯ: 'm',
      '\u24DD': 'n',
      ｎ: 'n',
      ǹ: 'n',
      ń: 'n',
      ñ: 'n',
      ṅ: 'n',
      ň: 'n',
      ṇ: 'n',
      ņ: 'n',
      ṋ: 'n',
      ṉ: 'n',
      ƞ: 'n',
      ɲ: 'n',
      ŉ: 'n',
      ꞑ: 'n',
      ꞥ: 'n',
      ǌ: 'nj',
      '\u24DE': 'o',
      ｏ: 'o',
      ò: 'o',
      ó: 'o',
      ô: 'o',
      ồ: 'o',
      ố: 'o',
      ỗ: 'o',
      ổ: 'o',
      õ: 'o',
      ṍ: 'o',
      ȭ: 'o',
      ṏ: 'o',
      ō: 'o',
      ṑ: 'o',
      ṓ: 'o',
      ŏ: 'o',
      ȯ: 'o',
      ȱ: 'o',
      ö: 'o',
      ȫ: 'o',
      ỏ: 'o',
      ő: 'o',
      ǒ: 'o',
      ȍ: 'o',
      ȏ: 'o',
      ơ: 'o',
      ờ: 'o',
      ớ: 'o',
      ỡ: 'o',
      ở: 'o',
      ợ: 'o',
      ọ: 'o',
      ộ: 'o',
      ǫ: 'o',
      ǭ: 'o',
      ø: 'o',
      ǿ: 'o',
      ɔ: 'o',
      ꝋ: 'o',
      ꝍ: 'o',
      ɵ: 'o',
      ƣ: 'oi',
      ȣ: 'ou',
      ꝏ: 'oo',
      '\u24DF': 'p',
      ｐ: 'p',
      ṕ: 'p',
      ṗ: 'p',
      ƥ: 'p',
      ᵽ: 'p',
      ꝑ: 'p',
      ꝓ: 'p',
      ꝕ: 'p',
      '\u24E0': 'q',
      ｑ: 'q',
      ɋ: 'q',
      ꝗ: 'q',
      ꝙ: 'q',
      '\u24E1': 'r',
      ｒ: 'r',
      ŕ: 'r',
      ṙ: 'r',
      ř: 'r',
      ȑ: 'r',
      ȓ: 'r',
      ṛ: 'r',
      ṝ: 'r',
      ŗ: 'r',
      ṟ: 'r',
      ɍ: 'r',
      ɽ: 'r',
      ꝛ: 'r',
      ꞧ: 'r',
      ꞃ: 'r',
      '\u24E2': 's',
      ｓ: 's',
      ß: 's',
      ś: 's',
      ṥ: 's',
      ŝ: 's',
      ṡ: 's',
      š: 's',
      ṧ: 's',
      ṣ: 's',
      ṩ: 's',
      ș: 's',
      ş: 's',
      ȿ: 's',
      ꞩ: 's',
      ꞅ: 's',
      ẛ: 's',
      '\u24E3': 't',
      ｔ: 't',
      ṫ: 't',
      ẗ: 't',
      ť: 't',
      ṭ: 't',
      ț: 't',
      ţ: 't',
      ṱ: 't',
      ṯ: 't',
      ŧ: 't',
      ƭ: 't',
      ʈ: 't',
      ⱦ: 't',
      ꞇ: 't',
      ꜩ: 'tz',
      '\u24E4': 'u',
      ｕ: 'u',
      ù: 'u',
      ú: 'u',
      û: 'u',
      ũ: 'u',
      ṹ: 'u',
      ū: 'u',
      ṻ: 'u',
      ŭ: 'u',
      ü: 'u',
      ǜ: 'u',
      ǘ: 'u',
      ǖ: 'u',
      ǚ: 'u',
      ủ: 'u',
      ů: 'u',
      ű: 'u',
      ǔ: 'u',
      ȕ: 'u',
      ȗ: 'u',
      ư: 'u',
      ừ: 'u',
      ứ: 'u',
      ữ: 'u',
      ử: 'u',
      ự: 'u',
      ụ: 'u',
      ṳ: 'u',
      ų: 'u',
      ṷ: 'u',
      ṵ: 'u',
      ʉ: 'u',
      '\u24E5': 'v',
      ｖ: 'v',
      ṽ: 'v',
      ṿ: 'v',
      ʋ: 'v',
      ꝟ: 'v',
      ʌ: 'v',
      ꝡ: 'vy',
      '\u24E6': 'w',
      ｗ: 'w',
      ẁ: 'w',
      ẃ: 'w',
      ŵ: 'w',
      ẇ: 'w',
      ẅ: 'w',
      ẘ: 'w',
      ẉ: 'w',
      ⱳ: 'w',
      '\u24E7': 'x',
      ｘ: 'x',
      ẋ: 'x',
      ẍ: 'x',
      '\u24E8': 'y',
      ｙ: 'y',
      ỳ: 'y',
      ý: 'y',
      ŷ: 'y',
      ỹ: 'y',
      ȳ: 'y',
      ẏ: 'y',
      ÿ: 'y',
      ỷ: 'y',
      ẙ: 'y',
      ỵ: 'y',
      ƴ: 'y',
      ɏ: 'y',
      ỿ: 'y',
      '\u24E9': 'z',
      ｚ: 'z',
      ź: 'z',
      ẑ: 'z',
      ż: 'z',
      ž: 'z',
      ẓ: 'z',
      ẕ: 'z',
      ƶ: 'z',
      ȥ: 'z',
      ɀ: 'z',
      ⱬ: 'z',
      ꝣ: 'z',
      Ά: '\u0391',
      Έ: '\u0395',
      Ή: '\u0397',
      Ί: '\u0399',
      Ϊ: '\u0399',
      Ό: '\u039F',
      Ύ: '\u03A5',
      Ϋ: '\u03A5',
      Ώ: '\u03A9',
      ά: '\u03B1',
      έ: '\u03B5',
      ή: '\u03B7',
      ί: '\u03B9',
      ϊ: '\u03B9',
      ΐ: '\u03B9',
      ό: '\u03BF',
      ύ: '\u03C5',
      ϋ: '\u03C5',
      ΰ: '\u03C5',
      ω: '\u03C9',
      ς: '\u03C3',
    };
    var f = function (i) {
      return g[i] || i;
    };
    return h.replace(/[^\u0000-\u007E]/g, f);
  };
  function d(f) {
    var g = [];
    this.filter('select').each(function () {
      var j = e(this);
      var i = j.data('tokenize2');
      var h = typeof f === 'object' && f;
      if (!i) {
        j.data('tokenize2', new c(this, h));
      }
      g.push(j.data('tokenize2'));
    });
    if (g.length > 1) {
      return g;
    } else {
      return g[0];
    }
  }
  var b = e.fn.tokenize2;
  e.fn.tokenize2 = d;
  e.fn.tokenize2.Constructor = c;
  e.fn.tokenize2.noConflict = function () {
    e.fn.tokenize2 = b;
    return this;
  };
});
!(function (c, f, a, e) {
  var i = { drag: true, drop: true, exclude: '', nested: true, vertical: true },
    o = {
      afterMove: function (t, d, u) {},
      containerPath: '',
      containerSelector: 'ol, ul',
      distance: 0,
      delay: 0,
      handle: '',
      itemPath: '',
      itemSelector: 'li',
      bodyClass: 'dragging',
      draggedClass: 'dragged',
      isValidTarget: function (t, d) {
        return true;
      },
      onCancel: function (t, d, v, u) {},
      onDrag: function (t, d, v, u) {
        t.css(d);
      },
      onDragStart: function (t, d, v, u) {
        t.css({ height: t.outerHeight(), width: t.outerWidth() });
        t.addClass(d.group.options.draggedClass);
        c('body').addClass(d.group.options.bodyClass);
      },
      onDrop: function (t, d, v, u) {
        t.removeClass(d.group.options.draggedClass).removeAttr('style');
        c('body').removeClass(d.group.options.bodyClass);
      },
      onMousedown: function (d, u, t) {
        if (!t.target.nodeName.match(/^(input|select|textarea)$/i)) {
          t.preventDefault();
          return true;
        }
      },
      placeholderClass: 'placeholder',
      placeholder: '<li class="placeholder"></li>',
      pullPlaceholder: true,
      serialize: function (v, u, t) {
        var d = c.extend({}, v.data());
        if (t) {
          return [u];
        } else {
          if (u[0]) {
            d.children = u;
          }
        }
        delete d.subContainers;
        delete d.sortable;
        return d;
      },
      tolerance: 0,
    },
    q = {},
    l = 0,
    h = { left: 0, top: 0, bottom: 0, right: 0 },
    g = {
      start: 'touchstart.sortable mousedown.sortable',
      drop: 'touchend.sortable touchcancel.sortable mouseup.sortable',
      drag: 'touchmove.sortable mousemove.sortable',
      scroll: 'scroll.sortable',
    },
    s = 'subContainers';
  function r(u, t) {
    var d = Math.max(0, u[0] - t[0], t[0] - u[1]),
      v = Math.max(0, u[2] - t[1], t[1] - u[3]);
    return d + v;
  }
  function n(z, x, t, v) {
    var u = z.length,
      d = v ? 'offset' : 'position';
    t = t || 0;
    while (u--) {
      var w = z[u].el ? z[u].el : c(z[u]),
        y = w[d]();
      y.left += parseInt(w.css('margin-left'), 10);
      y.top += parseInt(w.css('margin-top'), 10);
      x[u] = [y.left - t, y.left + w.outerWidth() + t, y.top - t, y.top + w.outerHeight() + t];
    }
  }
  function b(u, d) {
    var t = d.offset();
    return { left: u.left - t.left, top: u.top - t.top };
  }
  function p(v, x, u) {
    x = [x.left, x.top];
    u = u && [u.left, u.top];
    var w,
      t = v.length,
      d = [];
    while (t--) {
      w = v[t];
      d[t] = [t, r(w, x), u && r(w, u)];
    }
    d = d.sort(function (z, y) {
      return y[1] - z[1] || y[2] - z[2] || y[0] - z[0];
    });
    return d;
  }
  function m(d) {
    this.options = c.extend({}, o, d);
    this.containers = [];
    if (!this.options.rootGroup) {
      this.scrollProxy = c.proxy(this.scroll, this);
      this.dragProxy = c.proxy(this.drag, this);
      this.dropProxy = c.proxy(this.drop, this);
      this.placeholder = c(this.options.placeholder);
      if (!d.isValidTarget) {
        this.options.isValidTarget = e;
      }
    }
  }
  m.get = function (d) {
    if (!q[d.group]) {
      if (d.group === e) {
        d.group = l++;
      }
      q[d.group] = new m(d);
    }
    return q[d.group];
  };
  m.prototype = {
    dragInit: function (u, t) {
      this.$document = c(t.el[0].ownerDocument);
      var d = c(u.target).closest(this.options.itemSelector);
      if (d.length) {
        this.item = d;
        this.itemContainer = t;
        if (
          this.item.is(this.options.exclude) ||
          !this.options.onMousedown(this.item, o.onMousedown, u)
        ) {
          return;
        }
        this.setPointer(u);
        this.toggleListeners('on');
        this.setupDelayTimer();
        this.dragInitDone = true;
      }
    },
    drag: function (w) {
      if (!this.dragging) {
        if (!this.distanceMet(w) || !this.delayMet) {
          return;
        }
        this.options.onDragStart(this.item, this.itemContainer, o.onDragStart, w);
        this.item.before(this.placeholder);
        this.dragging = true;
      }
      this.setPointer(w);
      this.options.onDrag(this.item, b(this.pointer, this.item.offsetParent()), o.onDrag, w);
      var v = this.getPointer(w),
        u = this.sameResultBox,
        d = this.options.tolerance;
      if (
        !u ||
        u.top - d > v.top ||
        u.bottom + d < v.top ||
        u.left - d > v.left ||
        u.right + d < v.left
      ) {
        if (!this.searchValidTarget()) {
          this.placeholder.detach();
          this.lastAppendedItem = e;
        }
      }
    },
    drop: function (d) {
      this.toggleListeners('off');
      this.dragInitDone = false;
      if (this.dragging) {
        if (this.placeholder.closest('html')[0]) {
          this.placeholder.before(this.item).detach();
        } else {
          this.options.onCancel(this.item, this.itemContainer, o.onCancel, d);
        }
        this.options.onDrop(this.item, this.getContainer(this.item), o.onDrop, d);
        this.clearDimensions();
        this.clearOffsetParent();
        this.lastAppendedItem = this.sameResultBox = e;
        this.dragging = false;
      }
    },
    searchValidTarget: function (y, w) {
      if (!y) {
        y = this.relativePointer || this.pointer;
        w = this.lastRelativePointer || this.lastPointer;
      }
      var t = p(this.getContainerDimensions(), y, w),
        v = t.length;
      while (v--) {
        var u = t[v][0],
          z = t[v][1];
        if (!z || this.options.pullPlaceholder) {
          var d = this.containers[u];
          if (!d.disabled) {
            if (!this.$getOffsetParent()) {
              var x = d.getItemOffsetParent();
              y = b(y, x);
              w = b(w, x);
            }
            if (d.searchValidTarget(y, w)) {
              return true;
            }
          }
        }
      }
      if (this.sameResultBox) {
        this.sameResultBox = e;
      }
    },
    movePlaceholder: function (t, u, w, d) {
      var v = this.lastAppendedItem;
      if (!d && v && v[0] === u[0]) {
        return;
      }
      u[w](this.placeholder);
      this.lastAppendedItem = u;
      this.sameResultBox = d;
      this.options.afterMove(this.placeholder, t, u);
    },
    getContainerDimensions: function () {
      if (!this.containerDimensions) {
        n(
          this.containers,
          (this.containerDimensions = []),
          this.options.tolerance,
          !this.$getOffsetParent()
        );
      }
      return this.containerDimensions;
    },
    getContainer: function (d) {
      return d.closest(this.options.containerSelector).data(a);
    },
    $getOffsetParent: function () {
      if (this.offsetParent === e) {
        var d = this.containers.length - 1,
          t = this.containers[d].getItemOffsetParent();
        if (!this.options.rootGroup) {
          while (d--) {
            if (t[0] != this.containers[d].getItemOffsetParent()[0]) {
              t = false;
              break;
            }
          }
        }
        this.offsetParent = t;
      }
      return this.offsetParent;
    },
    setPointer: function (t) {
      var u = this.getPointer(t);
      if (this.$getOffsetParent()) {
        var d = b(u, this.$getOffsetParent());
        this.lastRelativePointer = this.relativePointer;
        this.relativePointer = d;
      }
      this.lastPointer = this.pointer;
      this.pointer = u;
    },
    distanceMet: function (d) {
      var t = this.getPointer(d);
      return (
        Math.max(Math.abs(this.pointer.left - t.left), Math.abs(this.pointer.top - t.top)) >=
        this.options.distance
      );
    },
    getPointer: function (d) {
      var t = d.originalEvent || (d.originalEvent.touches && d.originalEvent.touches[0]);
      return { left: d.pageX || t.pageX, top: d.pageY || t.pageY };
    },
    setupDelayTimer: function () {
      var d = this;
      this.delayMet = !this.options.delay;
      if (!this.delayMet) {
        clearTimeout(this._mouseDelayTimer);
        this._mouseDelayTimer = setTimeout(function () {
          d.delayMet = true;
        }, this.options.delay);
      }
    },
    scroll: function (d) {
      this.clearDimensions();
      this.clearOffsetParent();
    },
    toggleListeners: function (u) {
      var t = this,
        d = ['drag', 'drop', 'scroll'];
      c.each(d, function (v, w) {
        t.$document[u](g[w], t[w + 'Proxy']);
      });
    },
    clearOffsetParent: function () {
      this.offsetParent = e;
    },
    clearDimensions: function () {
      this.traverse(function (d) {
        d._clearDimensions();
      });
    },
    traverse: function (t) {
      t(this);
      var d = this.containers.length;
      while (d--) {
        this.containers[d].traverse(t);
      }
    },
    _clearDimensions: function () {
      this.containerDimensions = e;
    },
    _destroy: function () {
      q[this.options.group] = e;
    },
  };
  function j(u, t) {
    this.el = u;
    this.options = c.extend({}, i, t);
    this.group = m.get(this.options);
    this.rootGroup = this.options.rootGroup || this.group;
    this.handle = this.rootGroup.options.handle || this.rootGroup.options.itemSelector;
    var d = this.rootGroup.options.itemPath;
    this.target = d ? this.el.find(d) : this.el;
    this.target.on(g.start, this.handle, c.proxy(this.dragInit, this));
    if (this.options.drop) {
      this.group.containers.push(this);
    }
  }
  j.prototype = {
    dragInit: function (t) {
      var d = this.rootGroup;
      if (!this.disabled && !d.dragInitDone && this.options.drag && this.isValidDrag(t)) {
        d.dragInit(t, this);
      }
    },
    isValidDrag: function (d) {
      return d.which == 1 || (d.type == 'touchstart' && d.originalEvent.touches.length == 1);
    },
    searchValidTarget: function (d, u) {
      var x = p(this.getItemDimensions(), d, u),
        v = x.length,
        y = this.rootGroup,
        z = !y.options.isValidTarget || y.options.isValidTarget(y.item, this);
      if (!v && z) {
        y.movePlaceholder(this, this.target, 'append');
        return true;
      } else {
        while (v--) {
          var w = x[v][0],
            t = x[v][1];
          if (!t && this.hasChildGroup(w)) {
            var A = this.getContainerGroup(w).searchValidTarget(d, u);
            if (A) {
              return true;
            }
          } else {
            if (z) {
              this.movePlaceholder(w, d);
              return true;
            }
          }
        }
      }
    },
    movePlaceholder: function (A, t) {
      var E = c(this.items[A]),
        z = this.itemDimensions[A],
        d = 'after',
        u = E.outerWidth(),
        D = E.outerHeight(),
        y = E.offset(),
        v = { left: y.left, right: y.left + u, top: y.top, bottom: y.top + D };
      if (this.options.vertical) {
        var C = (z[2] + z[3]) / 2,
          B = t.top <= C;
        if (B) {
          d = 'before';
          v.bottom -= D / 2;
        } else {
          v.top += D / 2;
        }
      } else {
        var w = (z[0] + z[1]) / 2,
          x = t.left <= w;
        if (x) {
          d = 'before';
          v.right -= u / 2;
        } else {
          v.left += u / 2;
        }
      }
      if (this.hasChildGroup(A)) {
        v = h;
      }
      this.rootGroup.movePlaceholder(this, E, d, v);
    },
    getItemDimensions: function () {
      if (!this.itemDimensions) {
        this.items = this.$getChildren(this.el, 'item')
          .filter(
            ':not(.' +
              this.group.options.placeholderClass +
              ', .' +
              this.group.options.draggedClass +
              ')'
          )
          .get();
        n(this.items, (this.itemDimensions = []), this.options.tolerance);
      }
      return this.itemDimensions;
    },
    getItemOffsetParent: function () {
      var t,
        d = this.el;
      if (
        d.css('position') === 'relative' ||
        d.css('position') === 'absolute' ||
        d.css('position') === 'fixed'
      ) {
        t = d;
      } else {
        t = d.offsetParent();
      }
      return t;
    },
    hasChildGroup: function (d) {
      return this.options.nested && this.getContainerGroup(d);
    },
    getContainerGroup: function (u) {
      var v = c.data(this.items[u], s);
      if (v === e) {
        var t = this.$getChildren(this.items[u], 'container');
        v = false;
        if (t[0]) {
          var d = c.extend({}, this.options, { rootGroup: this.rootGroup, group: l++ });
          v = t[a](d).data(a).group;
        }
        c.data(this.items[u], s, v);
      }
      return v;
    },
    $getChildren: function (v, u) {
      var t = this.rootGroup.options,
        w = t[u + 'Path'],
        d = t[u + 'Selector'];
      v = c(v);
      if (w) {
        v = v.find(w);
      }
      return v.children(d);
    },
    _serialize: function (v, u) {
      var w = this,
        d = u ? 'item' : 'container',
        t = this.$getChildren(v, d)
          .not(this.options.exclude)
          .map(function () {
            return w._serialize(c(this), !u);
          })
          .get();
      return this.rootGroup.options.serialize(v, t, u);
    },
    traverse: function (d) {
      c.each(this.items || [], function (t) {
        var u = c.data(this, s);
        if (u) {
          u.traverse(d);
        }
      });
      d(this);
    },
    _clearDimensions: function () {
      this.itemDimensions = e;
    },
    _destroy: function () {
      var d = this;
      this.target.off(g.start, this.handle);
      this.el.removeData(a);
      if (this.options.drop) {
        this.group.containers = c.grep(this.group.containers, function (t) {
          return t != d;
        });
      }
      c.each(this.items || [], function () {
        c.removeData(this, s);
      });
    },
  };
  var k = {
    enable: function () {
      this.traverse(function (d) {
        d.disabled = false;
      });
    },
    disable: function () {
      this.traverse(function (d) {
        d.disabled = true;
      });
    },
    serialize: function () {
      return this._serialize(this.el, true);
    },
    refresh: function () {
      this.traverse(function (d) {
        d._clearDimensions();
      });
    },
    destroy: function () {
      this.traverse(function (d) {
        d._destroy();
      });
    },
  };
  c.extend(j.prototype, k);
  c.fn[a] = function (d) {
    var t = Array.prototype.slice.call(arguments, 1);
    return this.map(function () {
      var v = c(this),
        u = v.data(a);
      if (u && k[d]) {
        return k[d].apply(u, t) || this;
      } else {
        if (!u && (d === e || typeof d === 'object')) {
          v.data(a, new j(v, d));
        }
      }
      return this;
    });
  };
})(jQuery, window, 'tokenize2sortable');
